// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/golang/mock/mockgen/ignore/orig (interfaces: Adder,HasVariadic)

package mock_orig

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Adder interface
type MockAdder struct {
	ctrl     *gomock.Controller
	recorder *_MockAdderRecorder
}

// Recorder for MockAdder (not exported)
type _MockAdderRecorder struct {
	mock *MockAdder
}

func NewMockAdder(ctrl *gomock.Controller) *MockAdder {
	mock := &MockAdder{ctrl: ctrl}
	mock.recorder = &_MockAdderRecorder{mock}
	return mock
}

func (_m *MockAdder) EXPECT() *_MockAdderRecorder {
	return _m.recorder
}

func (_m *MockAdder) Inc(_param0 int64) {
	_m.ctrl.Call(_m, "Inc", _param0)
}

func (_mr *_MockAdderRecorder) Inc(_param0 int64) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Inc", _param0)
}

// Mock of HasVariadic interface
type MockHasVariadic struct {
	ctrl     *gomock.Controller
	recorder *_MockHasVariadicRecorder
}

// Recorder for MockHasVariadic (not exported)
type _MockHasVariadicRecorder struct {
	mock *MockHasVariadic
}

func NewMockHasVariadic(ctrl *gomock.Controller) *MockHasVariadic {
	mock := &MockHasVariadic{ctrl: ctrl}
	mock.recorder = &_MockHasVariadicRecorder{mock}
	return mock
}

func (_m *MockHasVariadic) EXPECT() *_MockHasVariadicRecorder {
	return _m.recorder
}

func (_m *MockHasVariadic) AllBoolVar(_param0 ...bool) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "AllBoolVar", _s...)
}

func (_mr *_MockHasVariadicRecorder) AllBoolVar(_param0 ...bool) *gomock.Call {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllBoolVar", _s...)
}

func (_m *MockHasVariadic) AllInterfaceVar(_param0 ...interface{}) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "AllInterfaceVar", _s...)
}

func (_mr *_MockHasVariadicRecorder) AllInterfaceVar(_param0 ...interface{}) *gomock.Call {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllInterfaceVar", _s...)
}

func (_m *MockHasVariadic) SomeBoolVar(_param0 string, _param1 ...bool) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "SomeBoolVar", _s...)
}

func (_mr *_MockHasVariadicRecorder) SomeBoolVar(_param0 string, _param1 ...bool) *gomock.Call {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SomeBoolVar", _s...)
}

func (_m *MockHasVariadic) SomeInterfaceVar(_param0 string, _param1 ...interface{}) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "SomeInterfaceVar", _s...)
}

func (_mr *_MockHasVariadicRecorder) SomeInterfaceVar(_param0 string, _param1 ...interface{}) *gomock.Call {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SomeInterfaceVar", _s...)
}
